---
title: "Homework Assignment #3" 
author: "Linus Ghanadan"
date: 2024-02-21
toc: true
format:
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

## Overarching question & sub-questions for infographic

**Overarching question for infographic:**
- Where are global methane emissions coming from?
**Sub-questions to be answered by infographic components:**
- What activities (e.g., agriculture, energy production, etc.) contribute most to global methane emissions?
- What countries emit the most methane?
- How do high-emitting countries vary in population and per capita emissions?
- How do high-emitting countries compare in terms of the activities most contributing to their methane emissions?

My overarching question and first two sub-questions were also mentioned in my first homework assignment. The second two questions are newer and have resulted from me getting to better understand the nuances of the data.

To answer these questions, I have two data sets, one containing population by country from the {gt} package, and another from the U.S. EPA containing 2015 country-level data on total methane emissions, emissions by four sectors (agriculture, energy, industial processes, and waste). After joining these data sets, I was able to calculate total methane emissions per capita at the country-level. Now, I have 8 variables that I want to focus on visualizing: country, total methane emissions, population, per capita methane emissions, and methane emissions from agriculture, energy, industrial processes, and waste.

## Two example data visualizations to draw from

[Treemap example](https://ourworldindata.org/contributed-most-global-co2)

In this treemap, I like how the continents are labeled outside the treemap with aggregate numbers, as it provides more information while also avoiding the use of a legend. I want to label my sectors of methane emissions in this way for the treemap in my final HW4.

[Scatter plot example](https://github.com/Ijeamakaanyene/tidytuesday/blob/master/outputs/2020-07_nfl_stadiums_redux.png)

In this side-by-side bar plot and scatter plot, I like the clean use of color labeling to highlight certain teams. I may try to find a way to use color in a consistant and clean way such as this in the final version of my scatter plot or in the bar plot that I'm planning to make. I also like the lack of grid lines in the scatterplot, which I plan to incorporate.

## Sketched drafts for my three graphs

![Alt text](images/plot1.png)
![Alt text](images/plot2.png)
![Alt text](images/plot3.png)

## Coded drafts for my three graphs

```{r setup, include=FALSE}
knitr::opts_chunk$set(include = TRUE, message = FALSE, warning = FALSE)
```


```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                setup                                     ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

library(here)
library(tidyverse)
library(ggtext)
library(treemapify)
library(showtext)

# import fonts
font_add_google(name = "Merriweather Sans", family = "merri sans")
font_add_google(name = "Barlow Condensed", regular.wt = 200, family = "barlow")

# enable {showtext} for rendering
showtext_auto()

# set scipen option to a high value to avoid scientific notation
options(scipen = 999)
```

```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                                import data                               ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# read in data
methane_df <- readr::read_csv(here("data", "Non-CO2 Greenhouse Gas Data Tool  US EPAZoom inZoom out2000Copyright (c) 2015 Highsoft AS, Based on data from Natural EarthChart context menu.csv")) %>% 
  janitor::clean_names() # convert column names to lower_case_snake format
```


```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          plot 1 wrangling                                ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# put world aggregate values in its own data frame
world_df <- methane_df[190, ]

# remove world aggregated values from methane_df
methane_df <- methane_df[-190, ]

# create long format data frame
world_df_long <- world_df %>%
  pivot_longer(cols = c("livestock", "rice_cultivation", "soil_cropland", "other_ag_ch4_and_n2o", "biomass", "coal_mining", "oil_and_natural_gas_systems", "other_energy", "aerosols", "aluminum_production", "electronic_power_systems", "fire_protection", "flat_panel_display_manufacturing", "foams_mfg_use_and_disposal", "hcfc_22_production", "magnesium_production", "nitric_and_adipic_acid_production", "photovoltaic_cell_manufacturing", "refrigeration_and_air_conditioning", "semiconductor_manufacturing", "solvent_use", "other_ip_ch4_and_n2o", "landfills", "wastewater", "other_waste_ch4_and_n2o"), # remove source columns
               names_to = "source", # new column source containing names from original source columns
               values_to = "source_emissions") %>% # new column source_emissions containing values from original source columns
  select("source", "source_emissions")

# create sector column that populates according to specified source
world_df_long <- world_df_long %>%
  mutate(sector = case_when(
    source %in% c("livestock", "rice_cultivation", "soil_cropland", "other_ag_ch4_and_n2o") ~ "agriculture",
    source %in% c("biomass", "coal_mining", "oil_and_natural_gas_systems", "other_energy") ~ "energy",
    source %in% c("aerosols", "aluminum_production", "electronic_power_systems", "fire_protection", "flat_panel_display_manufacturing", "foams_mfg_use_and_disposal", "hcfc_22_production", "magnesium_production", "nitric_and_adipic_acid_production", "photovoltaic_cell_manufacturing", "refrigeration_and_air_conditioning", "semiconductor_manufacturing", "solvent_use", "other_ip_ch4_and_n2o") ~ "industrial_processes",
    source %in% c("landfills", "wastewater", "other_waste_ch4_and_n2o") ~ "waste",
    TRUE ~ NA_character_)) # assign NA if any other source


```


```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          plot 1 visualization                            ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# edit names of sources (for plotting)
world_df_long <- world_df_long %>%
  mutate(source = case_when(
    source == "soil_cropland" ~ "Soil",
    source == "coal_mining" ~ "Coal",
    source == "livestock" ~ "Livestock",
    source == "landfills" ~ "Landfills",
    source == "wastewater" ~ "Wastewater",
    source == "refrigeration_and_air_conditioning" ~ "Cooling",
    source == "oil_and_natural_gas_systems" ~ "Oil/Gas",
    source == "biomass" ~ "Biomass",
    source == "rice_cultivation" ~ "Rice",
    source == "other_ag_ch4_and_n2o" ~ "Other",
    source == "aerosols" ~ "Aerosols",
    source == "hcfc_22_production" ~ "HCFCs",
    source == "nitric_and_adipic_acid_production" ~ "Nitric/Adipic Acid",
    source == "other_ip_ch4_and_n2o" ~ "Other",
    TRUE ~ source))

# edit names of sectors (for plotting)
world_df_long <- world_df_long %>%
  mutate(sector = case_when(
    sector == "agriculture" ~ "Agriculture (48%)",
    sector == "energy" ~ "Energy (29%)",
    sector == "waste" ~ "Waste (13%)",
    sector == "industrial_processes" ~ "Industrial Processes (10%)",
    TRUE ~ sector))

# define a custom color palette
custom_colors <- c(
  "Agriculture (48%)" = "#1f77b4",
  "Energy (29%)" = "#B22222",
  "Waste (13%)" = "#2ca02c",
  "Industrial Processes (10%)" = "#FF8C00")

# re-order sector factors (for plotting)
world_df_long <- world_df_long %>%
   mutate(sector = factor(sector, levels = c("Agriculture (48%)", "Energy (29%)", "Waste (13%)", "Industrial Processes (10%)")))

# create treemap
ggplot(world_df_long, aes(area = source_emissions, fill = sector, label = source, subgroup = sector)) + # using sector for coloring and as subgroups (appear in legend), labeling based on source
  geom_treemap() +
  geom_treemap_text(color = "white", place = "center", grow = TRUE, reflow = TRUE, family = "barlow") + # for text inside the treemap, allow to grow with grow = TRUE, flow onto next line with reflow = TRUE, and set font family to barlow
  scale_fill_manual(values = custom_colors) +  # apply custom color palette
  labs(title = "What sources emitted the most methane in 2015?") +
  theme(legend.position = "top",
      legend.title = element_blank(), 
      legend.text = element_text(size = 10, family = "barlow", face = "bold"), # set legend font to barlow
      plot.title = element_text(family = "merri sans", face = "bold", size = 12, hjust = 0.5)) # set title font to merri sans
```


```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          plot 2 wrangling                                ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# loading in country population data from gt package
pop_df <- gt::countrypops
pop_df <- pop_df %>% 
  rename(region = country_code_3) %>% # renaming column to join by
  filter(year == 2015)

# join methane and population to make new data frame
methane_pop_df <- left_join(x = methane_df, y = pop_df, by = "region") 

# create column for per capita emissions
methane_pop_df <- methane_pop_df %>% 
  mutate(emissions_pc = total_emissions / population) %>% 
  select(-region, -country_name, -country_code_2, -year) # remove irrelevant columns

# create list of EU countries
eu_countries <- c("Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", 
                  "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", 
                  "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta", "Netherlands", 
                  "Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain", "Sweden")

# filter for EU countries
eu_methane_pop_df <- methane_pop_df %>% filter(country %in% eu_countries)

# summarize the filtered data frame to create a new data frame
eu_summary_df <- data.frame(t(sapply(eu_methane_pop_df[, -which(names(eu_methane_pop_df) == "country")], sum, na.rm = TRUE)))

# define country column for in new data frame
eu_summary_df$country <- "European Union"

# bind row for EU to joined data frame of methane and population
methane_pop_df <- rbind(eu_summary_df, methane_pop_df)

# obtain top 6 countries and select relevant columns
top_countries <- methane_pop_df %>%
  arrange(desc(total_emissions)) %>%
  slice(1:6) %>% 
  select("country", "total_emissions", "emissions_pc", "population", "agriculture", "energy", "industrial_processes", "waste")



```



```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          plot 2 visualization                            ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# define color palette
country_colors <- c("United States" = "#020122", "Brazil" = "#020122", "Russia" = "#020122", "India" = "#020122", "European Union" = "#020122", "China" = "#020122")

# create scatter plot
ggplot(top_countries, aes(x = population, y = emissions_pc)) +
  geom_point(aes(size = total_emissions, color = country)) + # sizing points by total emissions and coloring points by country
  scale_color_manual(values = country_colors) + # applying custom color palette
  geom_text(data = top_countries, # labeling countries in plot
            aes(label = country, x = population, y = emissions_pc, size = total_emissions, color = country), # label according to country
            hjust = -0.25, vjust = 2, size = 3, family = "barlow", fontface = "bold") + # adjust label location and set font to barlow
  scale_x_continuous(limits = c(0, 1500000000)) +
  labs(x = "Population", y = "Per Capita Emissions (MtCO2eq)") +
  labs(title = "53% of global methane emissions in 2015 came from\n5 highest-emitting countries and the European Union (27 countries)") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(), # remove major gridlines
        panel.grid.minor = element_blank()) + # removes minor gridlines
  theme(axis.title.x = element_text(family = "barlow", face = "bold", size = 10, color = "grey30"), # adjust font, fontface, size, and color of x axis title text
        axis.title.y = element_text(family = "barlow", face = "bold", size = 10, color = "grey30"), # adjust font, fontface, size, and color of y axis title text
        axis.text.x = element_text(family = "barlow", face = "bold"), # adjust font, fontface, size, and color of x axis text
        axis.text.y = element_text(family = "barlow", face = "bold")) + # adjust font, fontface, size, and color of y axis text
  theme(axis.line = element_line(color = "black", size = 0.5)) + # add axis line
  theme(plot.title = element_text(family = "merri sans", size = 12, hjust = 0.5)) + # adjust font, size, and position of plot title
  theme(legend.position = "none") +
  annotate(
    geom = "text", # create text annotation
    x = 670000000, y = 0.000033, # specify where text annotation starts
    label = "Size of circle represents\ntotal emissions in 2015",
    hjust = "left",
    size = 4,
    family = "merri sans") +
  annotate(
    geom = "curve", # create curved arrow
    x = 650000000, xend = 420000000, # specify start and end point
    y = 0.000033, yend = 0.000042,
    arrow = arrow(length = unit(0.3, "cm")),
    curvature = -0.3, # adjust curvature
    size = 0.4)
```




```{r}
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##                          plot 3 visualization                            ----
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# convert the data to long format
top_countries_long <- top_countries %>%
  pivot_longer(cols = c("agriculture", "energy", "industrial_processes", "waste"), 
               names_to = "sector", values_to = "emissions")

# rename sectors (for plotting)
top_countries_long <- top_countries_long %>% 
  mutate(sector = case_when(
    sector == "agriculture" ~ "Agriculture",
    sector == "energy" ~ "Energy",
    sector == "industrial_processes" ~ "Industrial Processes",
    sector == "waste" ~ "Waste",
    TRUE ~ sector))

# rename countries (for plotting)
top_countries_long <- top_countries_long %>% 
  mutate(country = case_when(
    country == "United States" ~ "US",
    country == "European Union" ~ "EU",
    TRUE ~ country))

# re-order sectors as factors (for plotting)
top_countries_long$sector <- factor(top_countries_long$sector, 
                                    levels = c("Agriculture", "Energy", "Waste", "Industrial Processes"))

# re-order countries as factors (for plotting)
top_countries_long$country <- factor(top_countries_long$country, 
                                     levels = c("China", "US", "Russia", "EU", "India", "Brazil"))

# define custom color palette
custom_colors <- c(
  "Agriculture" = "#1f77b4",
  "Energy" = "#B22222",
  "Waste" = "#2ca02c",
  "Industrial Processes" = "#FF8C00")

## create dodged column plot
ggplot(top_countries_long, aes(x = country, y = emissions, fill = sector)) + # fill columns based on sector
  geom_col(position = "dodge") + # specify dodged position so to create space between countries
  labs(y = "Emissions (MtCO2eq)", title = "Sources of emissions in 5 highest-emitting\ncountries and the European Union", fill = "Sector") + # specify legend title with fill = "Sector"
  scale_fill_manual(values = custom_colors) + # apply custom color palette
  theme_minimal() +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_text(family = "barlow", face = "bold", color = "grey30"), # adjust font, fontface, size, and color of y axis title text
        axis.text.x = element_text(family = "barlow", face = "bold"), # adjust font and fontface of x axis text
        axis.text.y = element_text(family = "barlow", face = "bold"), # adjust font and fontface of y axis text
        legend.position = c(0.85, 0.85), # specify legend position
        legend.text = element_text(color = "grey30", face = "bold", size = 9, family = "barlow"), # adjust font, fontface, size, and color of y axis legend title
        legend.title = element_blank(),
        plot.title = element_text(family = "merri sans", size = 12, hjust = 0.5)) # adjust font, size, and position of plot title
```

## Questions

1. What challenges did you encounter or anticipate encountering as you continue to build / iterate on your visualizations in R?

[It was a major challenge trying to format the treemap the way that I wanted it based on the Our World in Data treemap that I chose as one of example visualizations. I thought that I'd be able to avoid having a legend, but I ultimately gave up trying because of the obstacles. I wanted to place colored text beside each subgroup instead of having a title, but is seemingly impossible in ggplot2 because of the inability to set margins only on the axis but not the entire plot (including the title). In addition, not being able to color the text with embedded HTML code while also updating the font using my imported fonts was very frustrating for me as well.]{style="color:navy;"}

2. What ggplot extension tools / packages do you need to use to build your visualizations? Are there any that we haven’t covered in class that you’ll be learning how to use for your visualizations?

[In addition to ggplot2, I will also be using {treemapify}, {ggtext}, and {showtext} to build my visualizations. We didn't explicitly cover {treemapify} during class, but I was able to make good use of it for this HW by reading the documentation.]{style="color:navy;"}

3. What feedback do you need from the instructional team and / or your peers to ensure that your intended message is clear?

[In particular, I'd like feedback on my plot titles, how I formatted my legends / annotations, and my decisions regarding font family and font face.]{style="color:navy;"}
